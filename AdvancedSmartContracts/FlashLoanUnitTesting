//Unit testing for flash loan example
const { expect } = require('chai');
const { ethers } = require('hardhat');

const tokens = (n) => {
	return ethers.utils.parseUnits(n.toString(), 'ether');
}

const ether = tokens;

describe('FlashLoan', () => {

	let token, flashLoan, flashLoanReceiver;
	let deployer;
	
	beforeEach(async () => {

		// Setup accounts
		accounts = await ethers.getSigners();
		deploy = accounts[0];

		// Load accounts
		const FlashLoan = await ethers.getContractFactory('FlashLoan');
		const FlashLoanReceiver = await ethers.getContractFactory('FlashLoanReceiver');
		const Token = await ethers.getContractFactory('Token');

		// Deploy token
		token = await Token.deploy('TestToken', 'TTX', '1000000');

		// Deploy flash loan pool
		flashLoan = await FlashLoan.deploy(token.address);

		// Approve tokens first
		let transaction = await token.connect(deployer).approve(flashLoan.address, tokens(1000000))

		// Deposit tokens into the pool
		transaction = await flashLoan.connect(deployer).depositTokens(tokens(1000000));
		await transaction.wait();

		// Deploy flash loan receiver
		flashLoanReceiver = await FlashLoanReceiver.deploy(flashLoan.address);
	})

	describe('Deployment', () => {

		it('Sends token to the flash loan pool contract', async () => {
			expect(await token.balanceOf(flashLoan.address)).to.equal(tokens(1000000));
		})
	})

	describe('Borrowing funds', () => {
		it('Borrows funds from the pool', async () => {
			let amount = tokens(100);
			let transaction = await flashLoanReceiver.connect(deployer).executeFlashLoan(_amount);
			let result = await transaction.wait();

			// expect the event that the loan was received
			//.withArgs specifies the arguments
			await expect(transaction).to.emit(flashLoanReceiver, "Loan received").withArgs(token.address, amount);
		})
	})
})
